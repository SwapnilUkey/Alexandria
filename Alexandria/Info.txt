The asgi and wsgi files are the hooks
For connecting to a Web Server's such as Apache or Engine X

wsgi It is standard for connection and it stands for web server gateway integration
and asgi is Asynchronous equivalent

manage.py It is the local admin file This file is used for development purposes


--------------------------------------------------------------
chapter 2
--------------------------------------------------------------

. apps . py: defines app meta-data, required for discovery

. view. py: functions or classes that serve web content

. tests. py: unit tests

. models.py: classes that map to database tables (ORM)

. admin. py: management code for models

. urls. py: app specific URL to view mappings

. migrations/: folder for database migration scripts

--------------------------------------------------------------

Unit Testing
. Django has overloaded Python's unit test framework
· Project-level or app-level tests
. Built-in mechanisms for:
- Logging in
- Visiting a view
- Verifying a response
. Does not use a browser
- Can't validate JavaScript on the page

Please refer to following link for creating new app and fetching django commands
Ctrl + Alt + R - manage commands

https://www.jetbrains.com/help/pycharm/creating-django-application-in-a-project.html#:~:text=The%20manage.py%20utility%20starts,click%20the%20Create%20App%20link.
-------------------------------------------------------------
chapter 3
-------------------------------------------------------------
Django Templates
· Separate mini-language for output
- Supports several
. Intentionally not Python
· Designed for separation between coders and designers
· Comprised of:
- Content
- Tags: actions like loops & conditionals
- Filters: data adaptors
. Not HTML specific
. Compiled for efficiency

-------------------------------------------------------------
Common Tags
· {% for item in container %} ... {% endfor %}
- loop variables: forloop. counter, forloop.first,
forloop. last, ...
- looping, supports an empty clause
· {% if condition %} ... {% endif %}
- conditional block, supports elif and else clauses
· {% comment "optional note" %} ...{% endcomment %}
- contents not included when rendered

-------------------------------------------------------------
Common Filters
. {{ data | upper }}
- turns data into upper case
- there is also a Lower

. {{ data | first }}
- returns first item in data
- there is also a last

· {{ data | pluralize }}
- returns an "s" if data is >1
- supports arguments to change how plural is done
------------------------------------------------------------
Django Output Types
. views output content, usually by rendering a template
· HTML references static content like:
- images
- CSS
- JavaScript
. static content can be served by Django, but shouldn't be in
production
· users can upload content: media
. media content can be served by Django, but shouldn't be in
production
------------------------------------------------------------
About Page
. HTML is very repetitive
· Template engine has inheritance tools, embodying DRY principle
. Use Bootstrap for styling

Composition Tags
· {% extends 'filename' %}
- this template inherits from a parent template
· {% block blockname %} ... {% endblock %}
- named section that can be inherited and overridden
- block. super contains parent's content
· {% include 'filename' %}
- insert a template inside of this template
· {% load packagename %}
- loads a template tag set, like Python's import statement
------------------------------------------------------------
Bootstrap Bootcamp
. Bootstrap uses a grid based system for layout
. Based on rows and 12 columns
· Responsive, adjusts to browser size, can specify wrap points
· Widgets
· <nav>
- navigation bar
· <main class="container">
- container for content
---------------------------------------------------------
Home Page
. Define a page at the base of the URL
. Like all other URLs, must be explicitly mapped
--------------------------------------------------------
chapter 4
-------------------------------------------------------
ORM
· Object Relational Model
· Object-oriented mechanism for mapping data structures to
permanent storage
. Classes represent tables
. Abstracts away the database
- Good and bad!

Django's ORM
· Supports multiple databases:
- PostgreSQL
- MariaDB
- MySQL
- Oracle
- SQLite
. Third-party back-ends
. Table migration management
. Tools for bulk-loading/saving data
. Declarative, class-based object mapping
. Attributes in a class correspond to columns in the database
- Over 25 fields supported with configurable options
- Data fields: integers, characters, dates, ...
- Relational fields: one-to-one, one-to-many, many-to-many
. Declaration of class defines mapping to tables
· Classes have managers for doing queries
. Instances of objects correspond to rows in the query result

from catalog.models import Book, Author
dickens = Author.objects.create(last_name="Dickens", birth_year=1812)
dickens
<Author: Author object (1)>
print(dickens)
Author object (1)
Author.objects.all()
<QuerySet [<Author: Author object (1)>]>
dickens.first_name
''
dickens.first_name = "Charles"
dickens.save()
result = Author.objects.get(id=1)
result.last_name
'Dickens'
Book. objects. create(title="A Tale of Two Cities", author=dickens)
Book. objects.create(title="Oliver Twist", author=dickens)
Book. objects.create(title="Hard Times", author=dickens)
Book.objects.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>]>

-------------------------------------------------------
Fixtures
. Django provides commands for importing and exporting data
· Supports:
- JSON
- JSONL
- XML
- YAML (if PyYAML is installed)
. Primary keys are hard-coded

---------------------------------------------------
Supported Databases
. SQLite
- Filename
. PostgresSQL
- Service file
- Password file
. MariaDB, MySQL, Oracle
- Hostname, port, user, password
. Third-party libraries for other databases
- Non-relational database backends available
------------------------------------------------------
Testing
. Django create an empty database for tests
. Each test is done in a transaction and rolled back
. Set-up and tear-down methods called before/after each test

-------------------------------------------------------------
More Django ORM
Default query order
. Field level validations
. Row level validations
· Advanced query capabilities:
- Grouping
- Aggregation
- By value
. Query objects
· Manual querying
---------------------------------------------------------
Review
. Django comes with an ORM
. Map Python classes & objects to database tables and rows
. Field declarations on model classes represent columns
. Data columns: numbers, strings, booleans, etc.
. Relationship columns
. Migrations manage changes to ORM objects
. Fixtures allow you to export and import data
. Testing creates a special database
-----------------------------------------------------
chapter 5
----------------------------------------------------
Django Admin
. Most web applications are all about CRUD:
- Create
- Read
- Update
-Delete
. Django provides a library to map model objects to CRUD
operations
. Web interface to the database

-------------------------------------------------------
App's admin. py File
. ModelAdmin declares interface

· Register the Mode Admin against a Model object
Customize class to modify the web interface
-------------------------------------------------------
Model Object Meta Data
. Model objects have a meta data area
. Controls behavior of queries and the admin:
- Name in admin
- Default order of queries
Database table name control
Permissions
Indexes
- Constraints
-------------------------------------------------------
Referencing Admin URLs
· Django provides a way of naming URLs
. No hard coding!
. Admin page URLs are named
. Cross reference items
. list_display supports any callable

----------------------------------------------------
Testing with the Admin
. Tests start with an empty database:
- Create any users or super-users
' Access and reference the AdminSite object within a test
. Admin utility lookup_field can be used to access admin fields
during testing

-----------------------------------------------------


